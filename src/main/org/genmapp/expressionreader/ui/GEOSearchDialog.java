/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GEOSearchDialog.java
 *
 * Created on Jul 1, 2010, 5:29:56 PM
 */

package org.genmapp.expressionreader.ui;

import org.genmapp.expressionreader.geo.ui.GDSViewerDialog;
import org.genmapp.expressionreader.geo.ui.GSEViewerDialog;
import org.genmapp.expressionreader.geo.ui.SOFTViewer;
import cytoscape.Cytoscape;
import cytoscape.task.Task;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import gov.nih.nlm.ncbi.soap.eutils.esearch.ESearchRequest;
import gov.nih.nlm.ncbi.soap.eutils.esummary.DocSumType;
import gov.nih.nlm.ncbi.soap.eutils.esummary.ItemType;
import java.awt.Dimension;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.genmapp.expressionreader.geo.GEOQuery;
import org.genmapp.expressionreader.geo.data.SOFT;
import org.genmapp.expressionreader.geo.ui.GEOQueryUI;
import org.genmapp.expressionreader.tasks.GEOSearchTask;
import org.genmapp.expressionreader.tasks.SOFTDownloadTask;
import org.genmapp.expressionreader.tasks.SearchResultViewer;

/**
 *
 * @author djiao
 */
public class GEOSearchDialog extends javax.swing.JDialog implements SearchResultViewer {

    private int page = 0;
    private int itemPerPage = 20;
    private int total = 0;
    private String term = "";

    /** Creates new form GEOSearchDialog */
    public GEOSearchDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        double[] percent = new double[] {0.1, 0.2, 0.25, 0.2, 0.1, 0.2};
        for (int i = 0; i < resultTable.getColumnCount(); i++) {
            TableColumn column = resultTable.getColumnModel().getColumn(i);
            column.setPreferredWidth((int) (1200 * percent[i]));
            column.setResizable(true);
        } 

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchPane = new javax.swing.JPanel();
        searchFld = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        bottomPane = new javax.swing.JPanel();
        viewBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        resultScrollPane = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        prevBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        pageField = new javax.swing.JTextField();
        totalLbl = new javax.swing.JLabel();
        nextBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        statusLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search GEO");
        getContentPane().setLayout(new java.awt.BorderLayout(2, 2));

        searchPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Search Term"));
        searchPane.setLayout(new java.awt.BorderLayout(2, 2));

        searchFld.setMinimumSize(new java.awt.Dimension(150, 27));
        searchFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFldActionPerformed(evt);
            }
        });
        searchPane.add(searchFld, java.awt.BorderLayout.CENTER);

        searchBtn.setText("Search!");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        searchPane.add(searchBtn, java.awt.BorderLayout.LINE_END);

        getContentPane().add(searchPane, java.awt.BorderLayout.PAGE_START);

        viewBtn.setText(" View ");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });
        bottomPane.add(viewBtn);

        getContentPane().add(bottomPane, java.awt.BorderLayout.PAGE_END);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        resultScrollPane.setPreferredSize(new java.awt.Dimension(452, 202));

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Summary", "Platform", "Species", "Samples"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        resultTable.setRowHeight(22);
        resultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
        });
        resultScrollPane.setViewportView(resultTable);

        jPanel1.add(resultScrollPane, java.awt.BorderLayout.CENTER);

        prevBtn.setText(" << ");
        prevBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevBtnActionPerformed(evt);
            }
        });
        jPanel2.add(prevBtn);

        jLabel1.setText("Page");
        jPanel2.add(jLabel1);

        pageField.setText("0");
        pageField.setMinimumSize(new java.awt.Dimension(50, 27));
        pageField.setPreferredSize(new java.awt.Dimension(50, 27));
        pageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pageFieldActionPerformed(evt);
            }
        });
        jPanel2.add(pageField);

        totalLbl.setText("of ");
        jPanel2.add(totalLbl);

        nextBtn.setText(" >> ");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });
        jPanel2.add(nextBtn);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.BorderLayout());

        statusLbl.setText("  ");
        jPanel3.add(statusLbl, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        if (("").equals(searchFld.getText())) {
            return;
        }

        if (!this.term.equals(searchFld.getText())) { //  new search
            this.term = searchFld.getText();
            this.page = 0;
        }

        ESearchRequest request = new ESearchRequest();
        request.setDb("gds");
        request.setRetMax(String.valueOf(this.itemPerPage));
        request.setRetStart(String.valueOf(this.page*this.itemPerPage));
        request.setTerm(searchFld.getText());

        final ESearchRequest query = request;

        Task task = new GEOSearchTask(query, this);
        JTaskConfig config = new JTaskConfig();
        config.setModal(false);
        config.setOwner(Cytoscape.getDesktop());
        config.setAutoDispose(true);
        TaskManager.executeTask(task, config);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        this.page++;
        this.searchBtnActionPerformed(evt);
    }//GEN-LAST:event_nextBtnActionPerformed

    private void prevBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevBtnActionPerformed
        this.page--;
        this.searchBtnActionPerformed(evt);
    }//GEN-LAST:event_prevBtnActionPerformed

    private void pageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pageFieldActionPerformed
        this.page = Integer.parseInt(this.pageField.getText())-1;
        this.searchBtnActionPerformed(evt);
    }//GEN-LAST:event_pageFieldActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        int row = resultTable.getSelectedRow();
        if (row >= 0) {
            Object value = resultTable.getModel().getValueAt(row, 0);
            if (value != null && !"".equals(value)) {
            // Download file
            SOFTDownloadTask task = new SOFTDownloadTask(new String[]{(String)value}, new SOFTViewer() {

                    public void viewSOFT(List<SOFT> list) {
                        for (SOFT soft : list) {
                            if (soft.getType() == SOFT.Type.GSE) {
                                GSEViewerDialog dialog = new GSEViewerDialog(Cytoscape.getDesktop(), false);
                                dialog.setSOFT(soft);
                                dialog.setSize(600, 500);
                                dialog.setVisible(true);
                            } else if (soft.getType() == SOFT.Type.GDS) {
                                GDSViewerDialog dialog = new GDSViewerDialog(Cytoscape.getDesktop(), false);
                                dialog.setSOFT(soft);
                                dialog.setVisible(true);
                            } else if (soft.getType() == SOFT.Type.GPL) {
                                GEOQueryUI.showSOFTViewerDialog(Cytoscape.getDesktop(), false, soft);
                            } else {
                                throw new UnsupportedOperationException("Wrong SOFT type: " + soft.getType() + ", Should be GSE/GDS/GPL");
                            }
                        }
                    }

                    public void closeView(SOFT soft) {
                        // not implemented
                    }
                }, SOFT.Format.quick);
            JTaskConfig config = task.getDefaultTaskConfig();

            TaskManager.executeTask(task, config);
        }
        }
    }//GEN-LAST:event_viewBtnActionPerformed

    private void searchFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFldActionPerformed
        this.searchBtnActionPerformed(evt);
    }//GEN-LAST:event_searchFldActionPerformed

    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked
        if (evt.getClickCount() == 2) {
            viewBtnActionPerformed(null);
        }
}//GEN-LAST:event_resultTableMouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GEOSearchDialog dialog = new GEOSearchDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton nextBtn;
    private javax.swing.JTextField pageField;
    private javax.swing.JButton prevBtn;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchFld;
    private javax.swing.JPanel searchPane;
    private javax.swing.JLabel statusLbl;
    private javax.swing.JLabel totalLbl;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables

    public void viewResults(int total, final List<DocSumType> list) {
        pageField.setText(String.valueOf(page + 1));
        int totalPages = total % itemPerPage == 0 ? total / itemPerPage : (total / itemPerPage + 1);
        totalLbl.setText("Of " + totalPages);

        String status = String.format("Viewing results %d to %d of %d", page*itemPerPage+1, 
                ((page+1)*itemPerPage>total)? total : (page+1)*itemPerPage, total);
        statusLbl.setText(status);

        prevBtn.setEnabled(page != 0);
        nextBtn.setEnabled((page + 1) != totalPages);

        DefaultTableModel model = (DefaultTableModel)resultTable.getModel();
        model.getDataVector().removeAllElements();

        String[] row = null;
        for (DocSumType docsum : list) {
            row = new String[6];
            List<ItemType> items = docsum.getItem();

            ItemType item = items.get(8);
            String entryType = item.getItemContent();
            if ("GDS".equals(entryType)) {
                item = items.get(0);
            } else if ("GSE".equals(entryType)) {
                item = items.get(4);
            } else if ("GPL".equals(entryType)) {
                item = items.get(3);
            }
            row[0] = entryType + item.getItemContent();

            row[1] = items.get(1).getItemContent();     // title
            row[2] = items.get(2).getItemContent();     // summary
            row[3] = items.get(20).getItemContent();    // platform
            row[4] = items.get(5).getItemContent();     // species
            row[5] = items.get(6).getItemContent();     // GSM

            model.addRow(row);
        }


    }

}
