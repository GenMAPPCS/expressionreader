package org.genmapp.expressionreader.ui;

import org.genmapp.expressionreader.data.SOFT;
import org.genmapp.expressionreader.ExpressionReaderUtil;
import org.genmapp.expressionreader.parser.SOFTParser;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author djiao
 */
public class SOFTViewerDialog extends javax.swing.JDialog implements SOFTViewer {
    /** Creates new form ViewSampleDialog */
    public SOFTViewerDialog(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
		URL url;
                InputStream gplIn = null;
                try {
                    url = new URL(String.format(ExpressionReaderUtil.GEO_URL, "GSM11805", "text", SOFT.Format.full));
                    gplIn = url.openConnection().getInputStream();

                    SOFT gsm = new SOFTParser().parseSOFT(gplIn, SOFT.Type.GSM);
                    if (gplIn != null) {
                        gplIn.close();
                    }

                    SOFTViewerDialog dialog = new SOFTViewerDialog(new javax.swing.JDialog(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.viewSOFT(gsm);
                    dialog.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(SOFTViewerDialog.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        gplIn.close();
                    } catch (IOException ex) {
                        Logger.getLogger(SOFTViewerDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }

    public void viewSOFT(SOFT soft) {
        SOFTViewerPane pane = new SOFTViewerPane(soft, this);
        this.setContentPane(pane);
        this.setTitle(soft.getId());
        this.setSize(600, 760);
        this.setVisible(true);
    }

    public void closeView(SOFT soft) {
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


}
